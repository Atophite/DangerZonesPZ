---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Atophite.
--- DateTime: 28/07/2023 13:25
---
RadiatedZones = {}
RadiatedZones.OnCreate = {}
RadiatedZones.OnTest = {}
RadiatedZones.GetItemTypes = {}

local AtosClient = AtosRadiatedZones.Client
local AtosConstants = AtosRadiatedZones.Constants

local function addExistingItemType(scriptItems, type)
    local all = getScriptManager():getItemsByType(type)
    for i=1,all:size() do
        local scriptItem = all:get(i-1)
        if not scriptItems:contains(scriptItem) then
            scriptItems:add(scriptItem)
        end
    end
end

-- Return true if recipe is valid, false otherwise
function RadiatedZones.OnTest.GeigerTellerBatteriesInsert(sourceItem, result)
    if sourceItem:getType() == "GeigerTeller" then
        return sourceItem:getUsedDelta() == 0; -- Only allow the batteries inserting if the geigerteller has no batteries left in it.
    end

    return true -- the battery
end

function RadiatedZones.OnCreate.GeigerTellerBatteriesInsert(items, result, player)

    local totalDelta = 0

    for i=0, items:size()-1 do
        -- we found the battery, we change his used delta according to the battery
        if items:get(i):getType() == "Battery" then
            totalDelta = totalDelta + items:get(i):getUsedDelta() / 4
            result:setUsedDelta(totalDelta);
        end
    end
end

-- Return true if recipe is valid, false otherwise
function RadiatedZones.OnTest.GeigerTellerBatteriesRemove(sourceItem, result)
    return sourceItem:getUsedDelta() > 0;
end

function RadiatedZones.OnCreate.GeigerTellerBatteriesRemove(items, result, player)

    for i=0, items:size()-1 do
        local item = items:get(i)
        if item:getType() == "GeigerTeller" then

            --Unfortunately if the result of the recipe is 4 batteries the code sees it as one battery instead of 4.
            --So I have to give the 3 batteries manually in an ugly way
            local battery1 = player:getInventory():AddItem("Battery")
            local battery2 = player:getInventory():AddItem("Battery")
            local battery3 = player:getInventory():AddItem("Battery")
            battery1:setUsedDelta(item:getUsedDelta())
            battery2:setUsedDelta(item:getUsedDelta())
            battery3:setUsedDelta(item:getUsedDelta())
            result:setUsedDelta(item:getUsedDelta())

            -- then we empty the geiger teller used delta (his energy/battery)
            item:setUsedDelta(0);
        end
    end
end

function RadiatedZones.OnTest.GasMaskAirFilterInsert(sourceItem, result)
    return true
end

function RadiatedZones.OnCreate.GasMaskAirFilterInsert(items, result, player)

    for i=0, items:size()-1 do
        local item = items:get(i)
        if items:get(i):getType() == "GasMaskFilter" or items:get(i):getType() == "ImprovisedGasMaskFilter" then
            --AtosClient:setUsedDelta(result, item:getUsedDelta() * 100)

            result:setCondition(item:getUsedDelta() * 10)
            AtosClient:setFilterTicks(result, AtosClient:getFilterTicks(item))
        end
    end

end

function RadiatedZones.OnTest.GasMaskAirFilterRemove(sourceItem, result)
    return true

end

function RadiatedZones.OnCreate.GasMaskAirFilterRemove(items, result, player)
    for i=0, items:size()-1 do
        local item = items:get(i)
        if item:getClothingItemName() == "Hat_GasMask" then

            -- Fill the air filter with useddelta from gasmask
            --result:setUsedDelta(getUsedDeltaFromModData(item))

            -- then we give an empty gas mask
            --setUsedDeltaFromModData(result, 0)
            local gasMask = player:getInventory():AddItem("RadiatedZones.Hat_EmptyGasMask")
            gasMask:setCondition(0)
            --result:setUsedDelta(AtosClient:getUsedDelta(item)/100)
            result:setUsedDelta(item:getCondition()/10)
            AtosClient:setFilterTicks(result, AtosClient:getFilterTicks(item))

        end
    end
end

function RadiatedZones.OnTest.RepairHazmatSuit(sourceItem, result)
    local validItemTypes = {
        ["Base.HazmatSuit"] = true,
        ["TheyKnew.MysteriousHazmat"] = true
    }

    local itemType = sourceItem:getFullType()
    if validItemTypes[itemType] then
        return sourceItem:getHolesNumber() > 0
    end
    return true
end

function RadiatedZones.OnCreate.RepairHazmatSuit(items, result, player)
    local validItemTypes = {
        ["Base.HazmatSuit"] = true,
        ["TheyKnew.MysteriousHazmat"] = true
    }

    local test = AtosClient

    for i = 0, items:size() - 1 do
        local item = items:get(i)
        local itemType = item:getFullType()

        if validItemTypes[itemType] then
            local itemCondition = item:getCondition()
            local itemDirtyness = item:getDirtyness()
            --Recipe has RemoveResultItem:true parameter,

            local hazmatSuit = player:getInventory():AddItem(itemType)

            hazmatSuit:setCondition(itemCondition)
            hazmatSuit:setDirtyness(itemDirtyness)
        end
    end
end

function RadiatedZones.GetItemTypes.Mask(scriptItems)

    for itemName, protectionType in pairs(AtosConstants.protectionTypeMap) do
        if protectionType == "GasMask" then
            addExistingItemType(scriptItems, itemName)

        end
    end

end